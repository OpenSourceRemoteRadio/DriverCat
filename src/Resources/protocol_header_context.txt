#define SERVER_PORT  "50000"
#define MAX_SERVER_COUNT 1
#define MAX_QUEUE_NODES 30  //0 and 1 are not acceptable
#define CONNECTION_TIME_OUT_SEC 5
#define SEND_TIME_OUT_SEC 5
#define RECV_TIME_OUT_SEC 5

#define TCP_KEEPALIVE_ENABLE 1
#define TCP_KEEPCNT_VALUE 5
#define TCP_KEEPIDLE_VALUE 5
#define TCP_KEEPINTVL_VALUE 1

typedef volatile unsigned int * bus_address;
void * transport_read_thread(void *ptr);
void * transport_write_thread(void *ptr);
void * command_thread(void *ptr);
void tcpClient_socket_close(void * handles_ptr);

/** 
 * @ingroup CommandManager
 * @brief Type of the command to be transfered.
 */

typedef enum
{
	TRANSFER_TYPE_POLL =  0, /**< Command will be polled from the server and the client will respond for the command whenever it receives poll command. */ 
	TRANSFER_TYPE_SERVICE, /**< Command will be sent from the server and the client will register the operation in the async database and responds periodically which trigers callback registered in the server. */ 
}Transfer_Type_Enum_Def;


/** 
 * @ingroup CommandManager
 * @brief Actions to manage the running application.
 */

typedef enum
{
	COMMAND_MANAGE_CLOSE, 			/**< Command to close the application .*/
	COMMAND_MANAGE_VERSION,		/**< Command to read version numbers for applications and drivers.*/
}mannage_command_action;


/** 
 * @ingroup SocketManager
 * @brief Socket descpriptors.
 */

typedef struct
{
	int 	connectedfd 	; 					/**< Descriptor for the connected socket for read and write. */
	char * 	pserver_ip_address ; 				/**< Server IPv4 address */
	char * port_no;
	struct addrinfo	* addrinfo_ptr;
	bool	connected		;
	bool	connecting		;
	bool	reading			;
	unsigned int server_index;
}socket_handles;


/** 
 * @ingroup CommandManager
 * @brief Link list to maintain the commands in the scheduler.
 */


typedef struct
{
	struct command_queue *Next;	/**< Pointer to the next element in queue.*/
	void * pQueueData;	/**< Command of the current queue element.*/
	unsigned int id;				/**< Id for the current command.*/
}command_queue,*pcommand_queue;

/**
 * @ingroup CommandManager
 * @brief Link list Heads to maintain the commands in the scheduler.
 */

typedef struct
{
	pthread_mutex_t queue_lock;		/**< Mutex lock to synchronise queueing and dequeuing .*/
	struct command_queue *Head;		/**< Pointer to the first command in the queue.*/
	char *queue_name;			/**< Name of the command queue.*/
	unsigned int num_of_nodes;			/**< Number of command elements in the queue.*/
}command_queue_head, *pcommand_queue_head;


/**
 * @ingroup CommandManager
 * @ingroup SocketManager
 * @brief Scheduler to maintain the firmware details.
 */

typedef struct
{
	command_queue_head        	WriteQueueHead;					/**< Queue head for commands to be sent to server*/
	command_queue_head        	CommandQueueHead;				/**< Queue head for valid commands to be executed*/
	pthread_t 		          	pServerConnectThreadHandle[MAX_SERVER_COUNT]; 	/**< Thread to perform write in the hardware modules*/
	pthread_t 		          	pTransportReadThreadHandle[MAX_SERVER_COUNT]; 	/**< Thread to perform write in the hardware modules*/
	pthread_t 		          	pTransportWriteThreadHandle; 	/**< Thread to perform read from the hardware modules*/
	pthread_cond_t	          	WriteThreadCondition;			/**< Condition signal to signal write thread*/
	pthread_t 		          	pCommandThreadHandle; 			/**< Thread to manage hardware modules*/
	pthread_cond_t            	CommandThreadCondition;			/**< Condition signal to signal command thread*/
	pthread_cond_t	          	condition_signal; 				/**< Condition to signal the read/write threads*/
	pthread_mutex_t           	lock; 							/**< Lock to synchronise the access to the fields in the scheduler header*/
	bool			          	is_thread;						/**< Condition to proceed to next iteration in threads*/
	socket_handles	  		  	ServerClientDetails[MAX_SERVER_COUNT]; 			/**< connection handles to get server client details*/
	unsigned int				number_of_server;								/**< Number of servers initiated*/
	bus_address        		  	ddrmemmapped;					/**< Virtual address for DDR3 memory*/
}socket_manager_header,*psocket_manager_header;



extern char server_ip_address[15]; /**< Server IP address. */
