/*
Copyright (c) <2017>, Intel Corporation

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Intel Corporation nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 * @file hepta_cm_client.c
 * @brief This module takes care of the server client socket connection and data transfer.
 *
 *
 */

/**
 * @defgroup SocketManager  Socket Manager
 * @brief This module takes care of the server client socket connection and data transfer.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/time.h>
#include <stdio.h>
#include <unistd.h>


/*******************************************************************************
 * Include public/global header files
 *******************************************************************************/
#include "hepta_protocol.h"
#include "hepta_firmware.h"
#include "hepta_datatype.h"



/**
 *
 * @ingroup SocketManager
 * @brief Prints the command attributes.
 * @param pCmdHeader Pointer to the Command header.
 */

 /**< Server IP address. */
void debug_dump_commandheader(phepta_cmd_pck_header pCmdHeader){

	DEBUG_PRINT(DEBUG_LEVEL_INFO,("packet_type %x \n",pCmdHeader->packet_type));
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("TransferType %x \n",pCmdHeader->TransferType));
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("module_type %x \n",pCmdHeader->module_type));
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("instant_num %x \n",pCmdHeader->instant_num));
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("address %x \n",pCmdHeader->address));
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("length %x \n",pCmdHeader->length));
}

/**
 *
 * @ingroup SocketManager
 * @brief Binds the client with the server through specified port number.
 * @param pSch_header Pointer to the Scheduler.
 * @param port_no  it is char pointer to a Port number to connect with server.
 * @return Returns HEPTA_SUCCESS if connection is bind successful.
 *
 */
hepta_status hepta_tcp_create_client(char* port_no,phepta_socket_manager_header pSch_header,char *server_ip_address)
{
	int ret;
	struct addrinfo hints, *servinfo, *addrinfo_ptr;
	memset(&hints, 0, sizeof hints);
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_STREAM;
	hints.ai_protocol = IPPROTO_TCP;

	if ((ret = getaddrinfo(server_ip_address, port_no, &hints, &servinfo)) != 0) 
	{
		fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(ret));
		return HEPTA_FAILURE;
	}

	for (addrinfo_ptr=servinfo; addrinfo_ptr != NULL; addrinfo_ptr = addrinfo_ptr->ai_next) 
	{
		if((pSch_header->ServerClientDetails.connectedfd = socket(addrinfo_ptr->ai_family, addrinfo_ptr->ai_socktype, addrinfo_ptr->ai_protocol)) < 0) 
		{
			perror("server: socket");
			continue;
		}
		break;
	}

	ret = connect(pSch_header->ServerClientDetails.connectedfd, addrinfo_ptr->ai_addr, addrinfo_ptr->ai_addrlen) ;
	if(ret < 0)
	{
		close(pSch_header->ServerClientDetails.connectedfd);
		perror("server: connection is failed \n");
		return HEPTA_FAILURE;
	}

	return HEPTA_SUCCESS;

}

/**
 * @ingroup SocketManager
 * @brief Reads the data from ethernet buffer and validates the header.
 * @param pConnectionDetails Pointer to the hepta_socket_handles structure.
 * @return Returns pointer to the hepta packet if data is read successfuly or NULL if error in reading from socket.
 */

phepta_transport_pck_header hepta_tcp_read(phepta_socket_manager_header pSocketManager,hepta_socket_handles *pConnectionDetails)
{
	int return_int = 0;
	unsigned int read_len = 0;
	char *pdata = NULL;

	phepta_transport_pck_header pTcpPacket=0;
	phepta_transport_pck_header tmp=0;


	pTcpPacket=malloc(HEPTA_TCP_PACKET_SIZE);

	receive:
	return_int = recv(pConnectionDetails->connectedfd,pTcpPacket,HEPTA_TCP_PACKET_SIZE,MSG_WAITALL);
	if(return_int < HEPTA_TCP_PACKET_SIZE)
	{
		DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Invalid TCP packet read. Reading again!\n"));
		goto receive ;
	}

	if(strncmp((char *)pTcpPacket->header,(char *)TCP_HEADER_STRING,TCP_HEADER_SIZE))
	{
		DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Invalid header. Transmission terminated!\n"));
		goto receive ;
		return pTcpPacket;
	}

	if(pTcpPacket->length > 0)
	{
		if(pTcpPacket->length < (pSocketManager->test_vector_size + sizeof(hepta_cmd_pck_header)))
		{
			tmp=malloc(HEPTA_TCP_PACKET_SIZE+pTcpPacket->length);
		}
		else
		{
			tmp=malloc(HEPTA_TCP_PACKET_SIZE+sizeof(hepta_cmd_pck_header)+REGISTER_SIZE_32);
		}
		memcpy(tmp,pTcpPacket,HEPTA_TCP_PACKET_SIZE);
		free(pTcpPacket);
		pTcpPacket=tmp;
		pdata = pTcpPacket->pData;
	}

	return_int=0;

	{

		if(pTcpPacket->length < (pSocketManager->test_vector_size + sizeof(hepta_cmd_pck_header)))
		{
			return_int = recv(pConnectionDetails->connectedfd,pdata,pTcpPacket->length,MSG_WAITALL);
		}
		else
		{
			DEBUG_PRINT(DEBUG_LEVEL_INFO,("Receiving in DDR3 RAM \n"));
			return_int += recv(pConnectionDetails->connectedfd,pdata,sizeof(hepta_cmd_pck_header),MSG_WAITALL);
			return_int += recv(pConnectionDetails->connectedfd,(void *)(pSocketManager->ddrmemmapped),pTcpPacket->length - sizeof(hepta_cmd_pck_header),MSG_WAITALL);
		}

		if(return_int>=pTcpPacket->length)
		{	
			DEBUG_PRINT(DEBUG_LEVEL_INFO,("%s %d received packet more than expected\n",__FUNCTION__,__LINE__));
			return pTcpPacket;
		}
		else
		{
			DEBUG_PRINT(DEBUG_LEVEL_ERROR,("%s %d received packet less than expected\n",__FUNCTION__,__LINE__));
			free(pTcpPacket);
			return NULL;
		}

		read_len += return_int;
		pdata = (char*)pdata + read_len;
	}


	return pTcpPacket;
}

/**
 * @ingroup SocketManager
 * @brief Writes the data from buffer to the socket.
 * @param pConnectionDetails Pointer to the hepta_socket_handles structure.
 * @param pTcpPacket Pointer to the hepta packet that contains the buffer to be transferred.
 */

void hepta_tcp_write(hepta_socket_handles *pConnectionDetails,phepta_transport_pck_header pTcpPacket)
{
	unsigned int written_len;
	unsigned int length;
	char *ptr=(char *)pTcpPacket;


	length=HEPTA_TCP_PACKET_SIZE+pTcpPacket->length;
	written_len = write(pConnectionDetails->connectedfd,pTcpPacket,HEPTA_TCP_PACKET_SIZE+pTcpPacket->length);

	if(written_len<length)
	{
		while((length-written_len)!=0)
		{
			ptr=((char *)pTcpPacket)+written_len;
			length=length-written_len;
			written_len = write(pConnectionDetails->connectedfd,pTcpPacket,length);
		}
	}


	return;
}

/**
 * @ingroup SocketManager
 * @brief This function will check the whether received packet has valid transport header
 * @param pPacket Pointer to the  HeptaPackt structure.
 * @return 0 for success and 1 for failure
 */
HeptaBoolean hepta_isvalid_transportpacket(phepta_transport_pck_header pPacket,phepta_socket_manager_header handler)
{
	HeptaBoolean status=HEPTA_FALSE;
	if(pPacket!=NULL)
	{
		if(!strncmp(pPacket->header,TCP_HEADER_STRING,TCP_HEADER_SIZE))
		{
			status=HEPTA_TRUE;  //valid packet
		}
	}
	return status;
}


/**
 * @ingroup SocketManager
 * @brief Close the socket connection.
 * @param pSch_header Pointer to the sheduler header.
 */

void hepta_tcpClient_socket_close(phepta_socket_manager_header pSch_header)
{
	close(pSch_header->ServerClientDetails.connectedfd);
	return;
}


/**
 * @ingroup SocketManager
 * @brief This function will append the queue
 * @param phepta_queue_head Pointer to the  hepta_queue_head structure and pointer to the data.
 */

int hepta_queue_append(phepta_queue_head pHead,void *data, int id)
{
	phepta_queue Queue=malloc(sizeof(hepta_queue));
	phepta_queue ptr;
	if(Queue==NULL)
		return 1;
	Queue->Next=NULL;
	Queue->pQueueData=data;
	Queue->id=id;
	pthread_mutex_lock(&pHead->queue_lock);
	if(pHead->Head==NULL)
	{
		pHead->Head=(struct hepta_queue *)Queue;
	}
	else
	{
		ptr=(phepta_queue)pHead->Head;
		while(ptr->Next)
			ptr=(phepta_queue)ptr->Next;
		ptr->Next=(struct hepta_queue *)Queue;
	}
	/*release condition sleep whoever waiting for this queue*/
	pHead->num_of_nodes++;
	pthread_mutex_unlock(&pHead->queue_lock);
	return HEPTA_ENQUEUED;
}

/**
 * @ingroup SocketManager
 * @brief This function will dequeue the first data from the queue
 * @param phepta_queue_head Pointer to the  hepta_queue_head structure.
 */

void* hepta_queue_dequeue(phepta_queue_head pHead)
{
	phepta_queue Queue=NULL;
	hepta_handler ptr=NULL;

	pthread_mutex_lock(&pHead->queue_lock);
	if(pHead->Head==NULL)
	{
		pthread_mutex_unlock(&pHead->queue_lock);
		return NULL;
	}
	if(pHead->Head!=NULL)
	{
		Queue=(phepta_queue)pHead->Head;
		pHead->Head = (struct hepta_queue *)((phepta_queue)pHead->Head)->Next;
	}
	pHead->num_of_nodes--;
	pthread_mutex_unlock(&pHead->queue_lock);
	ptr=Queue->pQueueData;
	free(Queue);
	return ptr;
}

/**
 * @ingroup SocketManager
 * @brief This function initializes the hepta_queue_head.
 * @param queue Pointer to the  hepta_queue_head structure.
 */

hepta_status hepta_init_function_queue(phepta_queue_head queue)
{
	static int i=1;
	pthread_mutex_init(&queue->queue_lock,NULL);
	queue->Head=NULL;
	queue->queue_name=i++;
	return HEPTA_SUCCESS;
}


/**
 * @ingroup SocketManager
 * @brief This function will send acknowldegement for packet in transport layer
 * @param pInpacket Pointer to the packet containing header and data.
 */

phepta_transport_pck_header hepta_alloc_transport_ackpacket(phepta_transport_pck_header pInpacket)
{
	phepta_transport_pck_header ptr=malloc(sizeof(hepta_transport_pck_header));
	strncpy((hepta_u8*)ptr->header,(hepta_8*)pInpacket->header,6);
	ptr->id=pInpacket->id;
	ptr->seq_num=pInpacket->seq_num;
	ptr->length=0;
	return ptr;
}

/**
 * @ingroup SocketManager
 * @brief This thread which reads data from the socket and verifies the transport header.
 * @param phepta_socket_manager_header Pointer to the  hepta_socket_manager_header structure.
 */

void * hepta_transport_read_thread(void *ptr)
{
	phepta_socket_manager_header handler=ptr;
	phepta_transport_pck_header pRdWrTcpPacket;
	phepta_transport_pck_header pAckPacket;
	HeptaBoolean valid_packet=HEPTA_TRUE;


	while(handler->is_thread)
	{
		valid_packet=HEPTA_TRUE;

		pRdWrTcpPacket=(phepta_transport_pck_header)hepta_tcp_read(handler,&handler->ServerClientDetails);

		if(!hepta_isvalid_transportpacket(pRdWrTcpPacket,handler))
		{
			/*packet is corrupted */
			valid_packet=HEPTA_FALSE;
			free(pRdWrTcpPacket);
			pRdWrTcpPacket=NULL;
		}

		if(valid_packet && pRdWrTcpPacket!=NULL)
		{
			DEBUG_PRINT(DEBUG_LEVEL_INFO,("Valid Packet Is received \n"));
			DEBUG_PRINT(DEBUG_LEVEL_INFO,("Packet length %x \n",pRdWrTcpPacket->length));

			/*Create Ack Packet */
			pAckPacket=hepta_alloc_transport_ackpacket(pRdWrTcpPacket);
			debug_dump_commandheader((phepta_cmd_pck_header)pRdWrTcpPacket->pData);
			/*queue the ack packet into write queue*/
			hepta_queue_append(&handler->WriteQueueHead,pAckPacket,pAckPacket->id);
			/*wake up write thread*/
			pthread_mutex_lock(&handler->lock);
			pthread_cond_signal(&handler->WriteThreadCondition);
			pthread_mutex_unlock(&handler->lock);

			hepta_queue_append(&handler->CommandQueueHead,pRdWrTcpPacket,pRdWrTcpPacket->id);
			/*wake up command thread*/
			pthread_mutex_lock(&handler->lock);
			pthread_cond_signal(&handler->CommandThreadCondition);
			pthread_mutex_unlock(&handler->lock);
		}
	}

	return NULL;
}



/**
 * @ingroup SocketManager
 * @brief This thread which writes data to the socket when ever write list is queued.
 * @param phepta_socket_manager_header Pointer to the  hepta_socket_manager_header structure.
 */

void * hepta_transport_write_thread(void *ptr)
{
	phepta_socket_manager_header handler=ptr;
	phepta_transport_pck_header pRdWrTcpPacket;
	phepta_transport_pck_header pTcpPacket;
	phepta_cmd_pck_header pCommandhdr;

	while(handler->is_thread)
	{
		/**< has to sleep until write queue got node*/
		HEPTA_DEBUG("Write thread will wait%s\n","!");
		pthread_mutex_lock(&handler->lock);
		pthread_cond_wait(&handler->WriteThreadCondition,&handler->lock);
		pthread_mutex_unlock(&handler->lock);
		HEPTA_DEBUG("Write thread resume%s\n","!");

		/**< get the first node from the queue*/
		//get until the queue is empty

		pRdWrTcpPacket=hepta_queue_dequeue(&handler->WriteQueueHead);


		while(pRdWrTcpPacket!=NULL)
		{
			pCommandhdr=(phepta_cmd_pck_header)pRdWrTcpPacket->pData;
			DEBUG_PRINT(DEBUG_LEVEL_INFO,("%s %d Id %d PacketType %d TransferType %d \n",__FUNCTION__,__LINE__,\
					pRdWrTcpPacket->id,pCommandhdr->packet_type,pCommandhdr->TransferType));

			hepta_tcp_write(&handler->ServerClientDetails,pRdWrTcpPacket);

			phepta_bus_address offset = (handler->ddrmemmapped+67108864) - 16;

			if(((phepta_bus_address)pRdWrTcpPacket) != offset)
			{
				DEBUG_PRINT(DEBUG_LEVEL_INFO,("Freeing allocated packet\n"));
				free(pRdWrTcpPacket);
			}
			else
			{
				DEBUG_PRINT(DEBUG_LEVEL_INFO,("Not Freeing allocated packet address %p\n",pRdWrTcpPacket));
			}
			pRdWrTcpPacket=hepta_queue_dequeue(&handler->WriteQueueHead);
		}
	}
	return NULL;
}

/**
 * @ingroup SocketManager
 * @brief This function will write commands to command queue after the read/write command packet has been acknowledged.
 * @param ptr pointer to the hepta_socket_manager_header packet.
 */

void * hepta_command_thread(void *ptr)
{
	phepta_socket_manager_header handler=ptr;
	hepta_status return_status;
	phepta_transport_pck_header pRdWrTcpPacket;
	phepta_cmd_pck_header pCmdHeader;
	phepta_u32 data_ptr;
	phepta_transport_pck_header pTempTcpPacket;

	while(handler->is_thread)
	{
		/**< has to sleep until write queue got node*/

		pthread_mutex_lock(&handler->lock);
		pthread_cond_wait(&handler->CommandThreadCondition,&handler->lock);
		pthread_mutex_unlock(&handler->lock);


		pRdWrTcpPacket=hepta_queue_dequeue(&handler->CommandQueueHead);
		while(pRdWrTcpPacket!=NULL)
		{

			pCmdHeader=(phepta_cmd_pck_header)pRdWrTcpPacket->pData;
			data_ptr = (phepta_u32)pCmdHeader->pData;
			debug_dump_commandheader(pCmdHeader);


			/*For 'Get' command , Data memory has to be allocated here*/
			if(((pRdWrTcpPacket->length - sizeof(hepta_cmd_pck_header))<(pCmdHeader->length*REGISTER_SIZE_32))&&(pCmdHeader->packet_type==HEPTA_PACKET_CMD_GET))
			{
				pTempTcpPacket=malloc(HEPTA_TCP_PACKET_SIZE+sizeof(hepta_cmd_pck_header)+(pCmdHeader->length*4));
				memcpy(pTempTcpPacket,pRdWrTcpPacket,HEPTA_TCP_PACKET_SIZE+sizeof(hepta_cmd_pck_header));
				free(pRdWrTcpPacket);
				pRdWrTcpPacket=pTempTcpPacket;
				pRdWrTcpPacket->length=sizeof(hepta_cmd_pck_header)+(pCmdHeader->length*4);
				pCmdHeader=(phepta_cmd_pck_header)pRdWrTcpPacket->pData;
				data_ptr = (phepta_u32)pCmdHeader->pData;
				debug_dump_commandheader(pCmdHeader);
				DEBUG_PRINT(DEBUG_LEVEL_INFO,("after Set Allocation Packet length %x DataLength %x\n",pRdWrTcpPacket->length,pCmdHeader->length));
			}

			return_status=hepta_command_decoder(pCmdHeader,pRdWrTcpPacket->id,&pRdWrTcpPacket);

			pCmdHeader=(phepta_cmd_pck_header)pRdWrTcpPacket->pData;
			data_ptr = (phepta_u32)pCmdHeader->pData;

			if(return_status < HEPTA_SUCCESS)
			{
				DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Command Failed,sending Error Response\n"));
				pRdWrTcpPacket->length=sizeof(hepta_cmd_pck_header)+sizeof(hepta_u32);
				pCmdHeader->packet_type = HEPTA_PACKET_ERROR;
				pCmdHeader->length = 1;
				*(data_ptr)=return_status;
			}

			if(pCmdHeader->TransferType ==HEPTA_SYNC)
			{
				pRdWrTcpPacket->length=sizeof(hepta_cmd_pck_header);
				pCmdHeader->packet_type = HEPTA_PACKET_ACK;

			}


			hepta_queue_append(&handler->WriteQueueHead,pRdWrTcpPacket,pRdWrTcpPacket->id);

			pthread_mutex_lock(&handler->lock);
			pthread_cond_signal(&handler->WriteThreadCondition);
			pthread_mutex_unlock(&handler->lock);


			pRdWrTcpPacket=hepta_queue_dequeue(&handler->CommandQueueHead);
		}

	}
	return handler;
}

/**
 * @ingroup SocketManager
 * @brief Sends service message to the server with hepta_id as id. This function queues the command in the write queue.
 * @param hepta_id Command id for the service message to be sent.
 * @param module_type Module type that should be specified in the service message
 * @return Status Hepta_SUCCESS on queueing the service message in the write queue.
 */



hepta_status hepta_send_service_message(phepta_socket_manager_header sch_handler,hepta_u16 hepta_id,hepta_module_type module_type)
{
	phepta_transport_pck_header pTcpPacket=0;
	phepta_cmd_pck_header pCmdHeader;

	if(sch_handler==NULL)
	{
		return HEPTA_FAILURE;
	}

	pTcpPacket=(phepta_transport_pck_header)malloc(HEPTA_TCP_PACKET_SIZE+sizeof(hepta_cmd_pck_header));

	pTcpPacket->header[0]='a';
	pTcpPacket->header[1]='l';
	pTcpPacket->header[2]='t';
	pTcpPacket->header[3]='e';
	pTcpPacket->header[4]='r';
	pTcpPacket->header[5]='a';

	pTcpPacket->id = hepta_id;
	pTcpPacket->length = sizeof(hepta_cmd_pck_header);
	pTcpPacket->seq_num = 0;

	pCmdHeader=(phepta_cmd_pck_header)pTcpPacket->pData;

	pCmdHeader->TransferType = HEPTA_SYNC;
	pCmdHeader->packet_type = HEPTA_PACKET_CMD_SERVICE;
	pCmdHeader->address = 0;
	pCmdHeader->instant_num = 0;
	pCmdHeader->length = 0;
	pCmdHeader->module_type = module_type;


	hepta_queue_append(&sch_handler->WriteQueueHead,pTcpPacket,pTcpPacket->id);
	pthread_mutex_lock(&sch_handler->lock);
	pthread_cond_signal(&sch_handler->WriteThreadCondition);
	pthread_mutex_unlock(&sch_handler->lock);

	return HEPTA_SUCCESS;

}
