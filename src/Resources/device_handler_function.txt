int fd;
unsigned char ret;
char number[4];
char device_node[256];
static pdevice_handler device_handler_ptr=NULL;
static unsigned int device_num_of_instance=-1;

unsigned int i=0;
int pid;
memory_map_resource *memory_map_resource_ptr;
unsigned int num_of_resource=0;
unsigned int current_resource=0;
bus_address mmap_address;
int service_index = 0;


if(device_handler_ptr==NULL)
{
	memset(device_node,0,256);	//erase device_node
	sprintf(device_node,"/proc/%s/num_of_instance","module_name");
	DEBUG_PRINT(DEBUG_LEVEL_INFO,("open file path %s \n",device_node));
	fd=open(device_node,O_RDWR); //open corresponding proc file
	if(fd <=0)
	{
		DEBUG_PRINT(DEBUG_LEVEL_ERROR,("unable to open %s \n",device_node));
		return NULL;
	}
	ret=read((int)fd,number,4);  
	close(fd);
	number[ret-1]='\0';
	device_num_of_instance=atoi(number);
	
	
	device_handler_ptr = malloc(sizeof(device_handler)*device_num_of_instance);
	if(device_handler_ptr == NULL)
	{
		DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Unable allocate memory \n"));
		return NULL;			
	}
	
	
	for(i=0;i<device_num_of_instance;i++)
	{
		memset(device_node,0,256);	//erase device_node content
		/**< assembling device file name from module type*/
		sprintf(device_node,"%s%s%d","/dev/","module_name",i);
		//DEBUG_PRINT(DEBUG_LEVEL_INFO,("%s %d %s \n",__FUNCTION__,__LINE__,device_node));
		device_handler_ptr[i].dev_name = strdup(device_node);
		device_handler_ptr[i].dev_file_handler = open(device_node,O_RDWR);
		device_handler_ptr[i].device_instance_number = i;

		if(device_handler_ptr[i].dev_file_handler < 1)
		{
			DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Resource is not available \n"));
			return NULL;
		}
		
		pid = getpid();
		ioctl(device_handler_ptr[i].dev_file_handler,IOCTL_SET_PID,(unsigned long)&pid);

		ioctl(device_handler_ptr[i].dev_file_handler,IOCTL_GET_NUM_RESOURCE,(unsigned long)&num_of_resource);
		if(num_of_resource > 0)
		{
			memory_map_resource_ptr=(memory_map_resource *)malloc(sizeof(memory_map_resource)*num_of_resource);
			ioctl(device_handler_ptr[i].dev_file_handler,IOCTL_GET_RESOURCES,(unsigned long)memory_map_resource_ptr);


			device_handler_ptr[i].reg_phy_addr = (bus_address *)malloc(sizeof(bus_address)*(num_of_resource));
			device_handler_ptr[i].reg_remap_addr = (bus_address *)malloc(sizeof(bus_address)*(num_of_resource));

			for(current_resource=0;current_resource<num_of_resource;current_resource++)
			{
				mmap_address = mmap(NULL,memory_map_resource_ptr[current_resource].size_in_bytes, PROT_READ|PROT_WRITE, MAP_SHARED, \
						device_handler_ptr[i].dev_file_handler,(off_t)memory_map_resource_ptr[current_resource].start_address);
				if (mmap_address == MAP_FAILED)
				{
					perror("mmap");
					DEBUG_PRINT(DEBUG_LEVEL_ERROR,("Memory Map Failed  \n"));
					return NULL;
				}

				device_handler_ptr[i].reg_phy_addr[current_resource]=memory_map_resource_ptr[current_resource].start_address;
				device_handler_ptr[i].reg_remap_addr[current_resource]=mmap_address;
			}
			free(memory_map_resource_ptr);
		}

		ioctl(device_handler_ptr[i].dev_file_handler,IOCTL_GET_UIO_MINOR_NUMBER,(unsigned long)& (device_handler_ptr[i].uio_irq_device_number));

		if(project_name_module_name_SERVICE_COUNT > 0)
		{
			device_handler_ptr[i].service_id_array =  malloc(sizeof(unsigned int)* project_name_module_name_SERVICE_COUNT );
			for(service_index=0;service_index< project_name_module_name_SERVICE_COUNT ; service_index++)
			{
				device_handler_ptr[i].service_id_array[service_index] = (unsigned int) (-1);
			}
		}
	}
}

if(instance_num >= device_num_of_instance)
{
	return NULL;
}
else
{
	return (device_handler_ptr+instance_num);
}	